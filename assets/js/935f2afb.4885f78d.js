"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Introduction","href":"/template-qtcpp/intro","docId":"intro"},{"type":"link","label":"Quick-Start","href":"/template-qtcpp/quickstart/","docId":"quickstart/index"},{"type":"category","label":"Features","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"API","href":"/template-qtcpp/features/api","docId":"features/api"},{"type":"link","label":"Stubs","href":"/template-qtcpp/features/stubs","docId":"features/stubs"},{"type":"link","label":"Olink","href":"/template-qtcpp/features/olink","docId":"features/olink"},{"type":"link","label":"Monitor","href":"/template-qtcpp/features/monitor","docId":"features/monitor"},{"type":"link","label":"Qml Plugin","href":"/template-qtcpp/features/qmlplugin","docId":"features/qmlplugin"},{"type":"link","label":"Http client","href":"/template-qtcpp/features/http","docId":"features/http"},{"type":"link","label":"Features","href":"/template-qtcpp/features/intro","docId":"features/intro"}],"href":"/template-qtcpp/features/"}]},"docs":{"features/api":{"id":"features/api","title":"API","description":"The feature api is the bare minimum for the code generation. What you receive is:","sidebar":"docsSidebar"},"features/http":{"id":"features/http","title":"Http client","description":"The feature is in experimental phase. Documentation will be added later.","sidebar":"docsSidebar"},"features/index":{"id":"features/index","title":"Features","description":"This guide explains how to use the generated code, what are the available features and what are benefits of them.","sidebar":"docsSidebar"},"features/intro":{"id":"features/intro","title":"Features","description":"This guide will explain how to use the generated plugin code. Which features can be enabled and what they generate.","sidebar":"docsSidebar"},"features/monitor":{"id":"features/monitor","title":"Monitor","description":"Use our monitor feature to examine you interface calls, state and signals. With this feature you obtain a monitor client and a monitored version of you interface. The monitoring server is embedded into the ApiGear Studio and CLI application(https://docs.apigear.io/docs/category/command-line).","sidebar":"docsSidebar"},"features/olink":{"id":"features/olink","title":"Olink","description":"This feature provides a client and a server adapters for your interfaces for the ObjectLink protocol. You can connect to different applications in same or different technologies (check out all of our templates). Or you can use it for simulation.","sidebar":"docsSidebar"},"features/qmlplugin":{"id":"features/qmlplugin","title":"Qml Plugin","description":"You may want to use a Qml plugin for your module. This may be handy when you don\'t want to register structs (with qRegisterMetaType) or the interfaces (with qmlRegisterType) on compile time, in the main. Instead you can use the structs and the interfaces as an external module.","sidebar":"docsSidebar"},"features/stubs":{"id":"features/stubs","title":"Stubs","description":"The feature stubs adds a semi-featured starting point for your implementation. What you receive is:","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Introduction","description":"This is the documentation for the Qt template.","sidebar":"docsSidebar"},"quickstart/index":{"id":"quickstart/index","title":"Quick-Start","description":"The Quick-Start guide explains how to, in few steps, get from an API to a functional Qt plugin.","sidebar":"docsSidebar"}}}')}}]);