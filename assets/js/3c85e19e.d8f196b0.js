"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[640],{7926:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));a(814);const s={sidebar_position:5},o="Qml Plugin",r={unversionedId:"features/qmlplugin",id:"features/qmlplugin",title:"Qml Plugin",description:"You may want to use a Qml plugin for your module. This may be handy when you don't want to register structs (with qRegisterMetaType) or the interfaces (with qmlRegisterType) on compile time, in the main. Instead you can use the structs and the interfaces as an external module.",source:"@site/docs/features/qmlplugin.md",sourceDirName:"features",slug:"/features/qmlplugin",permalink:"/template-qtcpp/features/qmlplugin",draft:!1,editUrl:"https://github.com/apigear-io/template-qtcpp/edit/main/docs/features/qmlplugin.md",tags:[],version:"current",lastUpdatedBy:"dphan10",lastUpdatedAt:1678197045,formattedLastUpdatedAt:"Mar 7, 2023",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Monitor",permalink:"/template-qtcpp/features/monitor"},next:{title:"Http client",permalink:"/template-qtcpp/features/http"}},l={},p=[],u={toc:p},d="wrapper";function m(t){let{components:e,...a}=t;return(0,i.kt)(d,(0,n.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"qml-plugin"},"Qml Plugin"),(0,i.kt)("p",null,"You may want to use a ",(0,i.kt)("a",{parentName:"p",href:"https://doc.qt.io/qtcreator/creator-qml-modules-with-plugins.html"},"Qml plugin")," for your module. This may be handy when you don't want to register structs (with ",(0,i.kt)("inlineCode",{parentName:"p"},"qRegisterMetaType"),") or the interfaces (with ",(0,i.kt)("inlineCode",{parentName:"p"},"qmlRegisterType"),") on compile time, in the main. Instead you can use the structs and the interfaces as an external module."),(0,i.kt)("p",null,"The plugin registers all the types and all you have to do is just use it in your CMakeList.\nYou should add a line to your application CMakeLists.txt"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'set (PLUGIN_SOURCES_PATH path/to/sources/of/the/plugin)\nset (PLUGIN_BINARY_PATH path/to/plugin/dll)\nset(QML_IMPORT_PATH ${PLUGIN_SOURCES_PATH} ${PLUGIN_BINARY_PATH} CACHE STRING "" FORCE)\n')))}m.isMDXComponent=!0}}]);