"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[596],{3970:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>p,toc:()=>u});var i=a(7462),n=(a(7294),a(3905)),o=a(814),l=a(4088);const r={sidebar_position:2},s="Stubs",p={unversionedId:"features/stubs",id:"features/stubs",title:"Stubs",description:"The feature stubs adds a semi-featured starting point for your implementation. What you receive is:",source:"@site/docs/features/stubs.md",sourceDirName:"features",slug:"/features/stubs",permalink:"/template-qtcpp/features/stubs",draft:!1,editUrl:"https://github.com/apigear-io/template-qtcpp/edit/main/docs/features/stubs.md",tags:[],version:"current",lastUpdatedBy:"dphan10",lastUpdatedAt:1678871649,formattedLastUpdatedAt:"Mar 15, 2023",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"API",permalink:"/template-qtcpp/features/api"},next:{title:"Olink",permalink:"/template-qtcpp/features/olink"}},d={},u=[{value:"File overview for module",id:"file-overview-for-module",level:3},{value:"The Stub",id:"the-stub",level:3},{value:"Factory",id:"factory",level:3},{value:"Test",id:"test",level:3}],c={toc:u},m="wrapper";function h(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,i.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"stubs"},"Stubs"),(0,n.kt)("p",null,"The feature ",(0,n.kt)("inlineCode",{parentName:"p"},"stubs")," adds a semi-featured starting point for your implementation. What you receive is:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"implementation stubs for your Interfaces."),(0,n.kt)("li",{parentName:"ul"},"the factory, that produces this implementation stubs (for QmlWrapper)"),(0,n.kt)("li",{parentName:"ul"},"a setup for tests.")),(0,n.kt)("h3",{id:"file-overview-for-module"},"File overview for module"),(0,n.kt)("p",null,"With an example API"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Hello World API (click to expand)"),(0,n.kt)(o.Z,{language:"yaml",showLineNumbers:!0,mdxType:"CodeBlock"},l.Z)),(0,n.kt)("p",null,"The following file structure will be generated, each file will be explained with feature detailed description."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{8}","{8}":!0},"\ud83d\udcc2hello-world\n \u2523 \ud83d\udcc2apigear\n \u2523 \ud83d\udcc2qt_hello_world\n \u2503 \u2523 \ud83d\udcc2apigear\n \u2503 \u2523 \ud83d\udcc2examples\n \u2503 \u2523 \ud83d\udcc2io_world\n \u2503 \u2503 \u2523 \ud83d\udcc2api\n \u2503 \u2503 \u2523 \ud83d\udcc2implementation\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2tests\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcCMakeLists.txt\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdctest_hello.cpp\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdctest_hello.h\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcCMakeLists.txt\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcfactory.cpp\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcfactory.h\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdchello.cpp\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdchello.h\n ...\n")),(0,n.kt)("h3",{id:"the-stub"},"The Stub"),(0,n.kt)("p",null,"Files ",(0,n.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdchello.h")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdchello.cpp")," contain the implementation of the interface. For each interface we generate the pair of ",(0,n.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdcinterface_name.h")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdcinterface_name.cpp"),"."),(0,n.kt)("p",null,"The implementation:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"inherits the abstract base class ",(0,n.kt)("inlineCode",{parentName:"li"},"AbstractHello")),(0,n.kt)("li",{parentName:"ul"},"adds the properties of interface as a private class members - here ",(0,n.kt)("inlineCode",{parentName:"li"},"Message m_last")),(0,n.kt)("li",{parentName:"ul"},"initializes them with default values in ctor."),(0,n.kt)("li",{parentName:"ul"},"defines getters and setters for each property"),(0,n.kt)("li",{parentName:"ul"},"provides empty implementation of operation.")),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"For all stubs we generate the import/export statements - here IO_WORLD_IMPL_EXPORT.")),(0,n.kt)("h3",{id:"factory"},"Factory"),(0,n.kt)("p",null,"Factory of stub is defined in ",(0,n.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdcfactory.h")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdcfactory.cpp"),"\nThis factory is necessary, when you want to provide this stub implementation to the Qml Wrapper.\nSee ",(0,n.kt)("a",{parentName:"p",href:"/template-qtcpp/features/api#providing-backend-to-qml-wrapper"},"this")," api section for full information."),(0,n.kt)("p",null,"Also have in mind, that using this version of the pair factory - stub you will not have any handle to interact with a created stub from code. Only changes and interaction will be possible from QML. You could create your version of factory which also registers the objects to some kind of global registry, this way you'd be able to also use it from code."),(0,n.kt)("h3",{id:"test"},"Test"),(0,n.kt)("p",null,"For each interface we provide a template for your tests: pair of ",(0,n.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdctest_hello.h")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdctest_hello.cpp")," files with a test class for the interface.\nIt contains 3 kinds of init methods: before each test cases is executed, before first test case is executed and one to create a global data table for tests; For clean up there are 2 methods: one called after each test and one called after last test case is called.\nThere are also slots - initial dummy tests, one for each operation and property."))}h.isMDXComponent=!0}}]);