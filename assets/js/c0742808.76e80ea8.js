"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[15],{6983:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var n=a(7462),i=(a(7294),a(3905)),r=a(814),l=a(4088);const o={},p="Features",s={unversionedId:"features/index",id:"features/index",title:"Features",description:"This guide will explain how to use the generated plugin code. Which features can be enabled and what they generate.",source:"@site/docs/features/index.md",sourceDirName:"features",slug:"/features/",permalink:"/template-qtcpp/features/",draft:!1,editUrl:"https://github.com/apigear-io/template-qtcpp/edit/main/docs/features/index.md",tags:[],version:"current",lastUpdatedBy:"dphan10",lastUpdatedAt:1677823995,formattedLastUpdatedAt:"Mar 3, 2023",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Quick-Start",permalink:"/template-qtcpp/quickstart/"},next:{title:"API",permalink:"/template-qtcpp/features/api"}},d={},m=[{value:"Get started",id:"get-started",level:2},{value:"Example API",id:"example-api",level:2},{value:"Features",id:"features-1",level:2},{value:"Core",id:"core",level:3},{value:"Extended",id:"extended",level:3},{value:"Folder structure",id:"folder-structure",level:2}],u={toc:m},h="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(h,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"features"},"Features"),(0,i.kt)("p",null,"This guide will explain how to use the generated plugin code. Which features can be enabled and what they generate."),(0,i.kt)("h2",{id:"get-started"},"Get started"),(0,i.kt)("p",null,"This template generates code for ",(0,i.kt)("a",{parentName:"p",href:"https://www.qt.io/"},(0,i.kt)("em",{parentName:"a"},"Qt"))," projects. In order to successfully compile and use the code, you need to have the ",(0,i.kt)("em",{parentName:"p"},"qt engine")," installed (at least 5.12). Check ",(0,i.kt)("a",{parentName:"p",href:"https://www.qt.io/download"},"the website")," for your options for open-source or commercial version.\nBasic understanding of ",(0,i.kt)("em",{parentName:"p"},"qt")," is required, and depending on your goal the qml or c++ knowledge is also necessary."),(0,i.kt)("p",null,"If you did not receive already generated code you can simply generate your own. Please follow the documentation for the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.apigear.io/cli/"},"ApiGear CLI")," or the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.apigear.io/studio/"},"ApiGear Studio")," for more information about the general code generation.\nSee also ","[quick start guide]"," (TODO) which shows how to prepare api and generate code out of it."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"For questions regarding this template please go to our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/orgs/apigear-io/discussions"},"discussions page"),". For feature requests or bug reports please use the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apigear-io/template-qtcpp/issues"},"issue tracker"),".")),(0,i.kt)("h2",{id:"example-api"},"Example API"),(0,i.kt)("p",null,"The following code snippet contains the ",(0,i.kt)("em",{parentName:"p"},"API")," which we will use throughout this guide to demonstrate the generated code and its use in ",(0,i.kt)("em",{parentName:"p"},"Qt"),". It will be explained in more details in the ",(0,i.kt)("a",{parentName:"p",href:"/template-qtcpp/features/api"},"API")," chapter."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Hello World API (click to expand)"),(0,i.kt)(r.Z,{language:"yaml",showLineNumbers:!0,mdxType:"CodeBlock"},l.Z)),(0,i.kt)("h2",{id:"features-1"},"Features"),(0,i.kt)("p",null,"This template supports a series of different features, which = can be split into two groups, ",(0,i.kt)("em",{parentName:"p"},"core")," and ",(0,i.kt)("em",{parentName:"p"},"extended"),". "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The full set of ",(0,i.kt)("em",{parentName:"li"},"core")," features generates a view model for the ",(0,i.kt)("inlineCode",{parentName:"li"},"api"),". This can be used to implement a working ",(0,i.kt)("em",{parentName:"li"},"C++")," and ",(0,i.kt)("em",{parentName:"li"},"qml")," service and directly use it in your UI project."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("em",{parentName:"li"},"extended")," features can be used in combination with ",(0,i.kt)("inlineCode",{parentName:"li"},"api")," and add more functionality on top, like the simulation.")),(0,i.kt)("p",null,"Each feature can be selected using the solution file or via command line tool."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("em",{parentName:"p"},"Features are case sensitive, make sure to always ",(0,i.kt)("strong",{parentName:"em"},"use lower-case.")," "))),(0,i.kt)("h3",{id:"core"},"Core"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/template-qtcpp/features/api"},"api")," - will generate compilable abstract base interface and a basic implementation for data types"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/template-qtcpp/features/stubs"},"stubs")," - adds a basic stubs for the ",(0,i.kt)("inlineCode",{parentName:"li"},"api"),", you'll get classes that can actually be instantiated"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/template-qtcpp/features/qmlplugin"},"qmlplugin")," - generates plugin which can be used to add the qml types")),(0,i.kt)("h3",{id:"extended"},"Extended"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/template-qtcpp/features/olink"},"olink")," - provides a client and server adapters for each interface, that can be connected to any of the other technology templates with support for ",(0,i.kt)("a",{parentName:"li",href:"https://docs.apigear.io/objectlink/"},"ObjectLink"),".",(0,i.kt)("admonition",{parentName:"li",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use  ",(0,i.kt)("a",{parentName:"p",href:"/template-qtcpp/features/olink"},"Olink")," feature for simulation."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/template-qtcpp/features/monitor"},"monitor")," - generates a middleware layer which logs all API events to the ",(0,i.kt)("a",{parentName:"li",href:"https://docs.apigear.io/cli/"},"CLI")," or the ",(0,i.kt)("a",{parentName:"li",href:"https://docs.apigear.io/studio/"},"Studio")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/template-qtcpp/features/http"},"http")," - a http client for your interfaces.")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Examples")," - generates examples of ",(0,i.kt)("inlineCode",{parentName:"p"},"main.cpp")," for:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"- services in olink server\n- olink client\n- example with qml, which creates a set up of qml with olink client factory as a backend and provides the services through with olink server.\n")),(0,i.kt)("p",null,"There is also an ",(0,i.kt)("em",{parentName:"p"},"internal")," feature ",(0,i.kt)("inlineCode",{parentName:"p"},"apigear"),", which is generated for the ",(0,i.kt)("em",{parentName:"p"},"extended")," features."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("em",{parentName:"p"},"meta")," feature ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," enables all specified features of the template. If you want to see the full extent of the generated code ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," is easiest solution.\nPlease note, ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," is part of the code generator and not explicitly used within templates.")),(0,i.kt)("h2",{id:"folder-structure"},"Folder structure"),(0,i.kt)("p",null,"This graph show the full folder structure which is generated when you have ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," features enabled. We will go into more details in the following chapters and explain the purpose of the files.\nEach folder inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"io_world")," is a separate feature.\nYou can notice the apigear folder inside of ",(0,i.kt)("inlineCode",{parentName:"p"},"qt_hello_world")," this is where the internal feature ",(0,i.kt)("inlineCode",{parentName:"p"},"apigear")," files are generated.\nThere is also a ",(0,i.kt)("inlineCode",{parentName:"p"},"thirdparty")," folder for qt promise."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"\ud83d\udcc2hello-world\n \u2523 \ud83d\udcc2apigear\n \u2503 \u2523 \ud83d\udcdchelloworld.solution.yaml\n \u2503 \u2517 \ud83d\udcdchelloworld.module.yaml\n \u2523 \ud83d\udcc2qt_hello_world\n \u2503 \u2523 \ud83d\udcc2apigear\n \u2503 \u2523 \ud83d\udcc2examples\n \u2503 \u2503 \u2523 \ud83d\udcc2olinkclient\n \u2503 \u2503 \u2523 \ud83d\udcc2olinkserver\n \u2503 \u2503 \u2523 \ud83d\udcc2qml\n # highlight-next-line\n \u2503 \u2523 \ud83d\udcc2io_world\n \u2503 \u2503 \u2523 \ud83d\udcc2api\n \u2503 \u2503 \u2523 \ud83d\udcc2http\n \u2503 \u2503 \u2523 \ud83d\udcc2implementation\n \u2503 \u2503 \u2523 \ud83d\udcc2monitor\n \u2503 \u2503 \u2523 \ud83d\udcc2olink\n \u2503 \u2503 \u2517 \ud83d\udcc2plugin\n \u2503 \u2523 \ud83d\udcc2thirdparty\n \u2503 \u2517 \ud83d\udcdcCMakeLists.txt\n")))}c.isMDXComponent=!0},4088:(e,t,a)=>{a.d(t,{Z:()=>n});const n='schema: apigear.module/1.0\nname: io.world\nversion: "1.0"\n\ninterfaces:\n  - name: Hello\n    properties:\n      - { name: last, type: Message }\n    operations:\n      - name: say\n        params:\n          - { name: msg, type: Message }\n          - { name: when, type: When }\n        return:\n          type: int\n    signals:\n      - name: justSaid\n        params:\n          - { name: msg, type: Message }\nenums:\n  - name: When\n    members:\n      - { name: Now, value: 0 }\n      - { name: Soon, value: 1 }\n      - { name: Never, value: 2 }\nstructs:\n  - name: Message\n    fields:\n      - { name: content, type: string }\n'}}]);