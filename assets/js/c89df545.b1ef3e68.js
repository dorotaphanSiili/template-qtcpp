"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[536],{8214:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>k,default:()=>b,frontMatter:()=>u,metadata:()=>h,toc:()=>g});var o=t(7462),i=(t(7294),t(3905)),a=t(814),r=t(4088);const l='project(QmlExamlple)\ncmake_minimum_required(VERSION 3.20)\n\n# append local binary directory for conan packages to be found\nset(CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR} ${CMAKE_MODULE_PATH})\n\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nset (SOURCES\n    main.cpp\n    main.qml\n    resources.qrc\n)\n\nset(QML_IMPORT_PATH  "${CMAKE_BINARY_DIR}/imports" CACHE STRING "" FORCE)\nset(QML2_IMPORT_PATH "${CMAKE_BINARY_DIR}/imports" CACHE STRING "" FORCE)\n\nadd_executable(QmlExamlple\n    ${SOURCES}\n)\n\nfind_package(Qt5 REQUIRED COMPONENTS Core Qml Network WebSockets Gui Quick QuickControls2 QuickWidgets)\nfind_package(apigear QUIET COMPONENTS olink_qt)\n\nfind_package(apigear QUIET COMPONENTS olink_core)\nif(NOT olink_core_FOUND)\n  # pull objectlink-core-cpp as dependency\n  message(STATUS "objectlink-core-cpp NOT FOUND, fetching the git repository")\n  FetchContent_Declare(olink_core\n      GIT_REPOSITORY https://github.com/apigear-io/objectlink-core-cpp.git\n      GIT_TAG v0.2.4\n      GIT_SHALLOW TRUE\n      EXCLUDE_FROM_ALL FALSE\n  )\n  FetchContent_MakeAvailable(olink_core)\nendif()\n\n\nfind_package(io_world QUIET COMPONENTS io_world_api io_world_impl io_world_olink plugin_io_world io_world_monitor)\ntarget_link_libraries(QmlExamlple\n    io_world_api\n    io_world_impl\n    io_world_olink\n    plugin_io_world\n    io_world_monitor\nQt5::Core Qt5::Qml Qt5::WebSockets Qt5::Gui Qt5::Quick Qt5::QuickControls2 Qt5::QuickWidgets\nolink_qt\nolink_core\n)\n\n\ninstall(TARGETS QmlExamlple\n        RUNTIME DESTINATION bin COMPONENT Runtime)\n',s='#include "io_world/api/apifactory.h"\r\n#include "io_world/olink/olinkfactory.h"\r\n#include "io_world/monitor/tracedapifactory.h"\r\n\r\n#include <QtCore>\r\n#include "olink/clientregistry.h"\r\n\r\n#include <QGuiApplication>\r\n#include <QQmlApplicationEngine>\r\n\r\n#include "olink/olinkclient.h"\r\n\r\n#include <memory>\r\n#include <iostream>\r\n\r\n#include <QtPlugin>\r\n\r\n\r\nint main(int argc, char *argv[]){\r\n\r\n    // Prepare Factory before app is created.\r\n    ApiGear::ObjectLink::ClientRegistry client_registry;\r\n    ApiGear::ObjectLink::OLinkClient client(client_registry);\r\n    io_world::OLinkFactory io_worldOlinkFactory(client);\r\n    io_world::ApiFactory::set(&io_worldOlinkFactory);\r\n\r\n    // Create main app\r\n    const QUrl url(QStringLiteral("qrc:/main.qml"));\r\n    QGuiApplication app(argc, argv);\r\n    QQmlApplicationEngine engine;\r\n\r\n    engine.load(url);\r\n\r\n    // Connect the client - all qml olink clients will be linked\r\n    client.connectToHost(QUrl("ws://127.0.0.1:8182/ws"));\r\n\r\n    auto result = app.exec();\r\n\r\n    return result;\r\n}\r\n',c='import QtQuick 2.15\r\nimport QtQuick.Layouts 1.2\r\nimport QtQuick.Controls 2.15\r\nimport io.world 1.0\r\n\r\nApplicationWindow {\r\n    id: appWindow\r\n    visible: true\r\n    width: 300\r\n    height: 300\r\n    ColumnLayout {\r\n        spacing: 10\r\n        id: mainLayout\r\n        anchors.fill: parent\r\n\r\n        Button {\r\n            id: button1\r\n            width: 200\r\n            height: 200\r\n            text: "Click to get result of a method"\r\n            onClicked: {\r\n                var msg = ioMessageFactory.create()\r\n                msg.content = "some message"\r\n                qmlIoWorldHello.say(msg, IoWorldWhen.New)\r\n            }\r\n        }\r\n        Button {\r\n            id: button2\r\n            width: 200\r\n            height: 200\r\n            text: qmlIoWorldHello.last.content\r\n            onClicked: {\r\n                console.log("Or events like changing properties or invoking methods")\r\n            }\r\n        }\r\n        Button {\r\n            id: button3\r\n            width: 200\r\n            height: 200\r\n            text: "Will show singal message"\r\n        }\r\n    }\r\n    IoWorldHello { id: qmlIoWorldHello\r\n        onJustSaid:{\r\n            console.log("signal received")\r\n            button3.text = msg.content\r\n        }\r\n    }\r\n\r\n    IoWorldMessageFactory {id: ioMessageFactory}\r\n\r\n}\r\n',p='<RCC>\r\n    <qresource prefix="/">\r\n        <file>main.qml</file>\r\n    </qresource>\r\n</RCC>',d='schema: apigear.scenario/1.0\r\nname: "first scenario"\r\nversion: "1.0"\r\n#initial properties and setting gunction response\r\ninterfaces:\r\n  - name: io.world.Hello #( module io.world and interface Hello combination)\r\n    properties:\r\n      last: {content: "Initial"}\r\n    operations:\r\n      - name: say\r\n        actions:\r\n         - $return: { value: 88  }\r\n# sequence of changing properties and emitting signals\r\nsequences:\r\n  - name: play with hello\r\n    interval: 2000 # 2 seconds\r\n    interface: io.world.Hello\r\n    loops: 3 \r\n    steps: # step is called every 2 secs according to interval\r\n      - name: change property\r\n        actions: \r\n          - $set: { last: {content: "First Change of Property"} }\r\n      - name: emit signal\r\n        actions: \r\n          - $signal: { justSaid: [ {content: "First Message"} ] }\r\n      - name: change property AND emit signal\r\n        actions:\r\n          - $set: { last: {content: "Second Change of Property"} }\r\n          - $signal: { justSaid: [ {content: "Other Signal"} ] }\r\n\r\n\r\n',u={sidebar_position:3},k="Olink",h={unversionedId:"features/olink",id:"features/olink",title:"Olink",description:"This feature provides a client and a server adapters for your interfaces for the ObjectLink protocol. You can connect to different applications in same or different technologies (check out all of our templates). Or you can use it for simulation.",source:"@site/docs/features/olink.md",sourceDirName:"features",slug:"/features/olink",permalink:"/template-qtcpp/features/olink",draft:!1,editUrl:"https://github.com/apigear-io/template-qtcpp/edit/main/docs/features/olink.md",tags:[],version:"current",lastUpdatedBy:"dphan10",lastUpdatedAt:1678823752,formattedLastUpdatedAt:"Mar 14, 2023",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Stubs",permalink:"/template-qtcpp/features/stubs"},next:{title:"Monitor",permalink:"/template-qtcpp/features/monitor"}},m={},g=[{value:"Apigear ObjectLink protocol and ObjectLink core library",id:"apigear-objectlink-protocol-and-objectlink-core-library",level:3},{value:"File overview for module",id:"file-overview-for-module",level:2},{value:"Qt apigear - The Network Layer",id:"qt-apigear---the-network-layer",level:3},{value:"Olink Client Adapter",id:"olink-client-adapter",level:3},{value:"Properties",id:"properties",level:4},{value:"Operations",id:"operations",level:4},{value:"Signals",id:"signals",level:4},{value:"How to set up working <code>OLinkHello</code>",id:"how-to-set-up-working-olinkhello",level:4},{value:"Olink Server Adapter",id:"olink-server-adapter",level:3},{value:"Properties",id:"properties-1",level:4},{value:"Operations",id:"operations-1",level:4},{value:"Signals",id:"signals-1",level:4},{value:"How to set up working <code>OLinkHelloAdapter</code>",id:"how-to-set-up-working-olinkhelloadapter",level:4},{value:"Olink Factory - for QML usage",id:"olink-factory---for-qml-usage",level:3},{value:"Simulation",id:"simulation",level:2},{value:"Prepare your application",id:"prepare-your-application",level:3},{value:"main.cpp",id:"maincpp",level:5},{value:"main.qml",id:"mainqml",level:5},{value:"CMakeLists.txt and resource.qrc",id:"cmakeliststxt-and-resourceqrc",level:5},{value:"Prepare the scenario",id:"prepare-the-scenario",level:3},{value:"Run the simulation",id:"run-the-simulation",level:3}],y={toc:g},f="wrapper";function b(e){let{components:n,...t}=e;return(0,i.kt)(f,(0,o.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"olink"},"Olink"),(0,i.kt)("p",null," This feature provides a client and a server adapters for your interfaces for the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.apigear.io/objectlink/"},"ObjectLink")," protocol. You can connect to different applications in same or different technologies (check out all of our ",(0,i.kt)("a",{parentName:"p",href:"https://docs.apigear.io/docs/category/sdk-templates"},"templates"),"). Or you can use it for simulation."),(0,i.kt)("h3",{id:"apigear-objectlink-protocol-and-objectlink-core-library"},"Apigear ObjectLink protocol and ObjectLink core library"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://docs.apigear.io/objectlink/"},"ObjectLink")," protocol is a lightweight protocol for the Objects described with an interface. It allows connecting a client object with a server object, and perform remote operations like: remote property change request (client) or notifications on property changed (server), inform about signal emission (server) and allows requesting a call of a method (client) and giving a response to the its outcome (server)."),(0,i.kt)("p",null,"The Olink feature for your interface uses a library ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apigear-io/objectlink-core-cpp"},"ObjectLink core"),", common for cpp based templates. Provided CMakeLists already contain all the dependencies, so you don't have to add it manually."),(0,i.kt)("p",null,"The library provides network independent abstraction layer for handling the protocol. It codes and decodes the messages and routes to proper objects kept in its registry.\nYou don't need to interact with the library much for proper work of the feature. All you need to do is instantiate the registries (for client and/or server) and pass them to network layer objects in ",(0,i.kt)("a",{parentName:"p",href:"olink#qt-apigear---the-network-layer"},"qt apigear library")," "),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"}," In this library we use STL classes in public interfaces.\nWe assume that this library is built from source (configuration provided by generated CMakeLists).\nOtherwise, it has to be ensured that your build configuration matches the library build configuration.")),(0,i.kt)("h2",{id:"file-overview-for-module"},"File overview for module"),(0,i.kt)("p",null," With an example  API"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Hello World API (click to expand)"),(0,i.kt)(a.Z,{language:"yaml",showLineNumbers:!0,mdxType:"CodeBlock"},r.Z)),(0,i.kt)("p",null,"The following file structure will be generated, each file will be explained with feature detailed description."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{4,16}","{4,16}":!0},"\ud83d\udcc2hello-world\n \u2523 \ud83d\udcc2apigear\n \u2503 \u2523 \ud83d\udcc2monitor\n \u2503 \u2523 \ud83d\udcc2olink\n \u2503 \u2503 \u2523 \ud83d\udcdcCMakeLists.txt\n \u2503 \u2503 \u2523 \ud83d\udcdcolinkclient.cpp\n \u2503 \u2503 \u2523 \ud83d\udcdcolinkclient.h\n \u2503 \u2503 \u2523 \ud83d\udcdcolinkhost.cpp\n \u2503 \u2503 \u2523 \ud83d\udcdcolinkhost.h\n \u2503 \u2503 \u2523 \ud83d\udcdcolinkremote.cpp\n \u2503 \u2503 \u2517 \ud83d\udcdcolinkremote.h\n \u2503 ...\n \u2523 \ud83d\udcc2qt_hello_world\n \u2503 \u2523 \ud83d\udcc2apigear\n \u2503 \u2523 \ud83d\udcc2examples\n \u2503 \u2523 \ud83d\udcc2io_world\n \u2503 \u2503 \u2523 \ud83d\udcc2api\n \u2503 \u2503 \u2523 \ud83d\udcc2implementation\n \u2503 \u2503 \u2523 \ud83d\udcc2olink\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcCMakeLists.txt\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcolinkfactory.cpp\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcolinkfactory.h\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcolinkhello.cpp\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcolinkhello.h\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcolinkhelloadapter.cpp\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcolinkhelloadapter.h\n ...\n")),(0,i.kt)("h3",{id:"qt-apigear---the-network-layer"},"Qt apigear - The Network Layer"),(0,i.kt)("p",null,"Together with the olink feature (or monitor feature) you'll see additional folder generated, the \ud83d\udcc2hello-world/\ud83d\udcc2apigear. The \ud83d\udcc2olink subfolder contains objects that implement a network layer (based on QtWebSocket library) for the ObjectLink protocol. Those are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"OlinkClient - the client, that serves your ",(0,i.kt)("a",{parentName:"li",href:"olink#Olink-Client-Adapter"},"interface client adapters"),".\nThe class is responsible for network connection for ObjectLink client side. It uses ObjectLink core library for handling messages according to ObjectLink protocol. Handles linking and unlinking with remote service for the sink added by user (the interface OlinkClient Adapters), with regard to the connection state. All the messages dedicated to your object will be delivered to the adapter and proper actions will be performed for the clients that use it, without any of your actions. Also the OlinkClient holds a message queue for messages during disconnected time."),(0,i.kt)("li",{parentName:"ul"},"OlinkHost and a helper class OlinkRemote- the server, which hosts your services exposed to network through the ",(0,i.kt)("a",{parentName:"li",href:"olink#Olink-Server-Adapter"},"interface server adapters"),". The class is responsible to set up the server and manage connections requested by clients. It uses ObjectLink core library for handling messages according to ObjectLink protocol. All incoming messages will be translated to calls and routed to your local object.")),(0,i.kt)("h3",{id:"olink-client-adapter"},"Olink Client Adapter"),(0,i.kt)("p",null,"Files ",(0,i.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdcolinkhello.h")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdcolinkhello.cpp")," contain the olink client adapter for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello")," interface."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class OLinkHello : public AbstractHello, public IObjectSink\n")),(0,i.kt)("p",null,"It inherits two interfaces: ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractHello")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},"IObjectSink"),", which comes from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apigear-io/objectlink-core-cpp"},"ObjectLink core"),". Apart from setting up and tear down of your ",(0,i.kt)("inlineCode",{parentName:"p"},"OlinkHello")," object, you should use it as a ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello")," Object only.\nThe IObjectSink interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="part of OlinkHello"',title:'"part',of:!0,'OlinkHello"':!0},"...\n    std::string olinkObjectName() override;\n    void olinkOnSignal(const std::string& signalId, const nlohmann::json& args) override;\n    void olinkOnPropertyChanged(const std::string& propertyId, const nlohmann::json& value) override;\n    void olinkOnInit(const std::string& objectId, const nlohmann::json& props, ::ApiGear::ObjectLink::IClientNode *node) override;\n    void olinkOnRelease() override;\n...\n")),(0,i.kt)("p",null,"is necessary for handling incoming messages from the server side and is used by a ",(0,i.kt)("inlineCode",{parentName:"p"},"OlinkClient")," (",(0,i.kt)("a",{parentName:"p",href:"olink#Qt-apigear---The-Network-Layer"},"Qt Apigear Olink lib"),"), after you link your object to it. You don't need to perform any additional actions, the object ",(0,i.kt)("inlineCode",{parentName:"p"},"OLinkHello")," (if the server side is up) will communicate with the server transparently for you, and you can focus on just using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello")," interface."),(0,i.kt)("h4",{id:"properties"},"Properties"),(0,i.kt)("p",null,"The property getters (here ",(0,i.kt)("inlineCode",{parentName:"p"},"Message last()")," ) return immediately the locally stored last received value from server.\nThe property setter (here ",(0,i.kt)("inlineCode",{parentName:"p"},"void setLast(const Message& last)")," ) requests setting a value on server side, local value is not changed.\nYou can connect to a property changed signals (here ",(0,i.kt)("inlineCode",{parentName:"p"},"void lastChanged(const Message& last)")," )\nWhen the client receives information that server changed the property, a target property (here ",(0,i.kt)("inlineCode",{parentName:"p"},"last"),") is updated locally and a signal that property has changed is emitted ( here ",(0,i.kt)("inlineCode",{parentName:"p"},"void lastChanged(const Message& last)"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Successful linking client with server ends with server sending a init message, that contains current state of properties of the service on server side, so the connected client adapter has its local properties initialized.")),(0,i.kt)("h4",{id:"operations"},"Operations"),(0,i.kt)("p",null,"The non-void operations have additionally the async version, which is called by the immediate one.\nThe async version sends an invoke operation request to a server."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="part of OlinkHello"',title:'"part',of:!0,'OlinkHello"':!0},"...\n    int say(const Message& msg, When::WhenEnum when) override;\n    QtPromise::QPromise<int> sayAsync(const Message& msg, When::WhenEnum when);\n...\n")),(0,i.kt)("p",null,"so calling ",(0,i.kt)("inlineCode",{parentName:"p"},"myOlinkHelloInstance.say(myWhen)")," implements execution of ",(0,i.kt)("inlineCode",{parentName:"p"},"sayAsync")," and waits for the result. Have in mind that this is a blocking operation."),(0,i.kt)("h4",{id:"signals"},"Signals"),(0,i.kt)("p",null,"You should not emit any signals from a client.\nYou can connect to any signals offered by your interface (here ",(0,i.kt)("inlineCode",{parentName:"p"},"void justSaid(const Message& msg)")," )\nWhen a your OlinkHello client receives the olinkOnSignal, a signal (here ",(0,i.kt)("inlineCode",{parentName:"p"},"justSaid"),") is emitted."),(0,i.kt)("h4",{id:"how-to-set-up-working-olinkhello"},"How to set up working ",(0,i.kt)("inlineCode",{parentName:"h4"},"OLinkHello")),(0,i.kt)("p",null,"As mentioned earlier you need a network layer, here provided by a ",(0,i.kt)("inlineCode",{parentName:"p"},"ApiGear::ObjectLink::OLinkClient")," which also contains the protocol handling ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientNode"),". All you need to do is give it a global ",(0,i.kt)("inlineCode",{parentName:"p"},"ApiGear::ObjectLink::ClientRegistry"),", request connecting to host when it is convenient for you and then add your ",(0,i.kt)("inlineCode",{parentName:"p"},"OlinkHello"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'    // Create a global registry.\n    ApiGear::ObjectLink::ClientRegistry registry;\n    // Create a client and make a connection\n    ApiGear::ObjectLink::OLinkClient client(registry);\n    client.connectToHost(QUrl("ws://127.0.0.1:8182"));\n\n    // Create your service client and request it linking, which will try to connect with a server side for this object.\n    auto ioWorldHello = std::make_shared<io_world::OLinkHello>();\n    client.linkObjectSource(ioWorldHello);\n\n    // use your ioWorldHello as it was Hello implementation\n    ioWorldHello.say(someWhen);\n    auto lastMessage = ioWorldHello->last();\n    ioWorldHello->setLast(someMessage);\n    ioWorldHello->connect(ioWorldHello.get(), &io_world::AbstractHello::justSaid, *otherObject, &SomeJustSaidUser::handleJustSaid);\n\n    // remember to unlink your object if you won\'t use it anymore.\n    client.unlinkObjectSource(ioWorldHello->olinkObjectName());\n')),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"ApiGear::ObjectLink::ClientRegistry can have only one object of a certain type. This means that, to have more than one 'OlinkHello' objects you need to put them in different registries. Each Object has an identifier which is created based on the Interface Name, this way client object can be matched with proper server object.")),(0,i.kt)("h3",{id:"olink-server-adapter"},"Olink Server Adapter"),(0,i.kt)("p",null,"Files ",(0,i.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdcolinkhelloadapter.h")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdcolinkhelloadapter.h")," contain the olink server adapter for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello")," interface."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class OLinkHelloAdapter : public QObject, public ApiGear::ObjectLink::IObjectSource\n{\npublic:\n    explicit OLinkHelloAdapter(ApiGear::ObjectLink::RemoteRegistry& registry, AbstractHello* impl);\n")),(0,i.kt)("p",null,"It implements an ",(0,i.kt)("inlineCode",{parentName:"p"},"IObjectSource")," interface (from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apigear-io/objectlink-core-cpp"},"ObjectLink core"),"), which wraps your ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello")," object with a functionality that allows remote usage of it with the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.apigear.io/objectlink/"},"ObjectLink")," protocol. It handles all the network requests based on which it calls your local object . When creating the ",(0,i.kt)("inlineCode",{parentName:"p"},"OLinkHelloAdapter")," you need to provide the local ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractHello")," service object, you want to expose to clients."),(0,i.kt)("p",null,"The IObjectSource interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="part of OLinkHelloAdapter"',title:'"part',of:!0,'OLinkHelloAdapter"':!0},"...\n    std::string olinkObjectName() override;\n    nlohmann::json olinkInvoke(const std::string& methodId, const nlohmann::json& args) override;\n    void olinkSetProperty(const std::string& propertyId, const nlohmann::json& value) override;\n    void olinkLinked(const std::string& objectId, IRemoteNode* node) override;\n    void olinkUnlinked(const std::string& objectId) override;\n    nlohmann::json olinkCollectProperties() override;\n...\n")),(0,i.kt)("p",null,"Withe a OlinkHost set up (Qt Apigear Olink lib) and your Interface registered, starting on client connection all communication is handled and you don't need to perform any additional actions. The object ",(0,i.kt)("inlineCode",{parentName:"p"},"OLinkHelloAdapter")," will communicate with clients transparently for you, and you can focus on just using your ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello")," object. "),(0,i.kt)("p",null,"All the received messages from the clients are handled in a thread in which the connection resides, this means that your object may be used from different threads (local and each connection)."),(0,i.kt)("h4",{id:"properties-1"},"Properties"),(0,i.kt)("p",null,"Each time a property changed signals (here ",(0,i.kt)("inlineCode",{parentName:"p"},"void lastChanged(const Message& last)")," ) is emitted, a message is sent to all connected clients with information, which property changed to which value. This may occur either when you change a property directly on your local ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello")," object, or when a change property request message is received by the ",(0,i.kt)("inlineCode",{parentName:"p"},"OLinkHelloAdapter"),", which applies the property on your local ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello")," object."),(0,i.kt)("h4",{id:"operations-1"},"Operations"),(0,i.kt)("p",null,"The operations invocation which came from the clients through the network will be performed on your local ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello")," object. The result of the operation (if any) will be returned only to a caller, not all clients. Have in mind that your object may be called from more that one thread."),(0,i.kt)("h4",{id:"signals-1"},"Signals"),(0,i.kt)("p",null,"All the signals emitted by your local ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello")," objects are forwarded to all connected clients."),(0,i.kt)("h4",{id:"how-to-set-up-working-olinkhelloadapter"},"How to set up working ",(0,i.kt)("inlineCode",{parentName:"h4"},"OLinkHelloAdapter")),(0,i.kt)("p",null,"As mentioned earlier you need a network layer, here provided by a ",(0,i.kt)("inlineCode",{parentName:"p"},"ApiGear::ObjectLink::OLinkHost")," (The ",(0,i.kt)("inlineCode",{parentName:"p"},"ApiGear::ObjectLink::OLinkRemote")," objects are created automatically per connection) which also contains the protocol handling ",(0,i.kt)("inlineCode",{parentName:"p"},"RemoteNodes"),". All you need to do is give  a global ",(0,i.kt)("inlineCode",{parentName:"p"},"ApiGear::ObjectLink::RemoteRegistry")," with your ",(0,i.kt)("inlineCode",{parentName:"p"},"OLinkHelloAdapter")," in it to ",(0,i.kt)("inlineCode",{parentName:"p"},"ApiGear::ObjectLink::OLinkHost"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'\n    // Prepare the registry, the server, and an object which you want to expose.\n    ApiGear::ObjectLink::RemoteRegistry registry;\n    ApiGear::ObjectLink::OLinkHost server(registry);\n    server.listen("localhost", 8182);\n    auto ioWorldHello = std::make_shared<io_world::Hello>();\n\n    // Create your OLinkHelloAdapter and add it to registry.\n    auto ioWorldOlinkHelloService = std::make_shared<io_world::OLinkHelloAdapter>(registry, &ioWorldHello);\n    registry.addSource(ioWorldOlinkHelloService);\n\n    // use your ioWorldHello as it was Hello implementation\n    ioWorldHello.say(someWhen);\n    auto lastMessage = ioWorldHello->last();\n    ioWorldHello->setLast(someMessage); // after this call - if new property is different than current one - all clients will be informed about new value.\n    ioWorldHello->connect(ioWorldHello.get(), &io_world::AbstractHello::justSaid, *otherObject, &SomeJustSaidUser::handleJustSaid);\n\n    // Remember to remove your ioWorldOlinkHelloService after you finish using it.\n    registry.removeSource(ioWorldOlinkHelloService->olinkObjectName());\n')),(0,i.kt)("h3",{id:"olink-factory---for-qml-usage"},"Olink Factory - for QML usage"),(0,i.kt)("p",null,"Files ",(0,i.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdcolinkfactory.h"),"  and ",(0,i.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdcolinkfactory.cpp")," contain the OLinkFactory which creates the OlinkClient versions of your interfaces.\nIn our example it will produce only ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello")," interfaces:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"}," std::shared_ptr<AbstractHello> createHello(QObject *parent = nullptr) override;\n")),(0,i.kt)("p",null,"The factory is necessary when you want to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello")," client directly in QML. For that, you will choose the ",(0,i.kt)("a",{parentName:"p",href:"api#qml-wrappers"},"QML version")," of your API to which you need provide OlinkClient backend - this is what the factory is for. See more details ",(0,i.kt)("a",{parentName:"p",href:"api#providing-backend-to-qml-wrapper"},"on providing backend to QML wrapper")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'    // Prepare Factory before app is created.\n    ApiGear::ObjectLink::ClientRegistry client_registry;\n    ApiGear::ObjectLink::OLinkClient client(client_registry);\n    io_world::OLinkFactory io_worldOlinkFactory(client);\n    io_world::ApiFactory::set(&io_worldOlinkFactory);\n    ...\n    // Connect the client - all qml olink clients will be linked if the server services are already up.\n    client.connectToHost(QUrl("ws://127.0.0.1:8182"));\n')),(0,i.kt)("p",null,"The factory uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"ApiGear::ObjectLink::OLinkClient")," and links the objects when they are created. You don't have to perform any other actions, just use your qml version of ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-qml"},"...\nimport io_world 1.0\n\nApplicationWindow {\n...\n            Button {\n            width: 80\n            height: 80\n            text: qmlIoWorldHello.last.content\n            onClicked: {\n                qmlIoWorldHello.say(someMessage, someWhen)\n            }\n        }\n    IoWorldHello { id: qmlIoWorldHello }\n...\n}\n")),(0,i.kt)("h2",{id:"simulation"},"Simulation"),(0,i.kt)("p",null," The simulation can be used to test, demonstrate or develop applications without the need to have the actual service available.\nThe simulation server is integrated into ",(0,i.kt)("a",{parentName:"p",href:"https://docs.apigear.io/docs/category/desktop-studio"},"ApiGear studio")," and the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.apigear.io/docs/cli/simulate"},"CLI"),"."),(0,i.kt)("p",null," For simulating you will use ",(0,i.kt)("a",{parentName:"p",href:"https://docs.apigear.io/docs/advanced/simulation/scenario"},"simulation scenarios")," They allow to define sequences of actions which can be triggered by an operation call or by name. The actions can change the property values of the service or emit signals. The scenarios can be written using a YAML schema."),(0,i.kt)("p",null,"See more on ",(0,i.kt)("a",{parentName:"p",href:"https://docs.apigear.io/docs/advanced/simulation/intro"},"simulation"),"."),(0,i.kt)("h3",{id:"prepare-your-application"},"Prepare your application"),(0,i.kt)("p",null,"Make sure you are using OlinkClient as your ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello")," object, either:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"instance on ",(0,i.kt)("a",{parentName:"li",href:"olink#olink-client-adapter"},"cpp side")),(0,i.kt)("li",{parentName:"ul"},"or ",(0,i.kt)("a",{parentName:"li",href:"olink#olink-factory---for-qml-usage"},"qml version")," and connect to a same url and port that you configure in the ApiGear studio.")),(0,i.kt)("p",null,"you may try our example - copy the code into new folder in generated ",(0,i.kt)("inlineCode",{parentName:"p"},"examples")," folder\nThis is example with qml version of using OlinkClient. "),(0,i.kt)("h5",{id:"maincpp"},"main.cpp"),(0,i.kt)("p",null,"The main.cpp sets up the qml factory"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"main.cpp (click to expand)"),(0,i.kt)(a.Z,{language:"yaml",showLineNumbers:!0,mdxType:"CodeBlock"},s)),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Make sure to configure the client to use local connection and same port as your simulation server, e.g. set ",(0,i.kt)("inlineCode",{parentName:"p"},'client.connectToHost(QUrl("ws://127.0.0.1:8182/ws"));'))),(0,i.kt)("h5",{id:"mainqml"},"main.qml"),(0,i.kt)("p",null,"As a starting point, describes 3 buttons, which are connected to:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Usage of method - on click, it executes the method (request to server) and shows the outcome as a button text."),(0,i.kt)("li",{parentName:"ol"},"Binding to a property - text of button 2"),(0,i.kt)("li",{parentName:"ol"},"Binding to a signal outcome - text of button 3")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"main.qml(click to expand)"),(0,i.kt)(a.Z,{language:"yaml",showLineNumbers:!0,mdxType:"CodeBlock"},c)),(0,i.kt)("h5",{id:"cmakeliststxt-and-resourceqrc"},"CMakeLists.txt and resource.qrc"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"CMakeLists.txt(click to expand)"),(0,i.kt)(a.Z,{language:"yaml",mdxType:"CodeBlock"},l)),(0,i.kt)("details",null,(0,i.kt)("summary",null,"resources.qrc(click to expand)"),(0,i.kt)(a.Z,{language:"yaml",mdxType:"CodeBlock"},p)),(0,i.kt)("h3",{id:"prepare-the-scenario"},"Prepare the scenario"),(0,i.kt)("p",null,"As a starting point you can check our simulation scenario: "),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Scenario(click to expand)"),(0,i.kt)(a.Z,{language:"yaml",showLineNumbers:!0,mdxType:"CodeBlock"},d)),(0,i.kt)("p",null,"Apart from header with the scenario name and its version it consists of two part:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"initialization - for each interface (here, our ui.world.Hello line 6), we're setting initial values of properties(line 8) and the return value of function calls (line 12)"),(0,i.kt)("li",{parentName:"ul"},"sequence of events. You can prepare more than one sequence. For each of them set interval between calling each action (line 16), set how many runs of that sequence you want to execute (line 18) and name the interface the action should be applied to (line 17). In each action you may change many properties, and emit signals.")),(0,i.kt)("h3",{id:"run-the-simulation"},"Run the simulation"),(0,i.kt)("p",null,"Put your scenario file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"\ud83d\udcc2hello-world/apigear"),"  along with other ",(0,i.kt)("inlineCode",{parentName:"p"},".yaml")," files.\nIf you are using studio, reload your project. Go to ",(0,i.kt)("inlineCode",{parentName:"p"},"settings")," and make sure you set same port as in your client app (here ",(0,i.kt)("inlineCode",{parentName:"p"},"8182"),").\nStart your client application, and start your scenario in ",(0,i.kt)("inlineCode",{parentName:"p"},"simulation")," tab, with a ",(0,i.kt)("inlineCode",{parentName:"p"},"play")," button."),(0,i.kt)("p",null,"You can also use the console version of apigear, run your scenario with command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"apigear simulate run path-from-cli-to-scenario/helloworldtest.scenario.yaml --addr :8182\n")))}b.isMDXComponent=!0}}]);